# juanfi_hs_onLogin_71a_full
# by: Chloe Renae & Edmar Lozada
# ------------------------------

local iUser $username
local iDMac $"mac-address"
local iDInt $interface
local aUser [/ip hotspot user get $iUser]
local iMail ($aUser->"email")
local eLogoutUser do={
  /ip hotspot active remove [find user=$iUser]
  /ip hotspot cookie remove [find user=$iUser]
  /ip hotspot cookie remove [find mac-address=$iDMac]
}
# Cancel user-login if Invalid User eMail/Profile
if (!($iMail~"new" || $iMail~"extend" || $iMail~"active")) do={
  log error "( $iUser ) ONLOGIN ERROR: [$iMail] => INVALID EMAIL!"
  /ip hotspot user set [find name=$iUser] disable=yes
  $eLogoutUser iUser=$iUser iDMac=$iDMac; return 0
}

# Check Valid Entry
if ($iMail~"new" || $iMail~"extend") do={
  local aNote [toarray ($aUser->"comment")]
  local iValidity [totime ($aNote->0)]
  local iSalesAmt [tonum ($aNote->1)]
  local iExtUCode ($aNote->2)
  local iVendoNme ($aNote->3)
  # Cancel user-login if Invalid Comment
  if (!($iValidity>=0 && $iSalesAmt>=0 && ($iExtUCode=0 or $iExtUCode=1))) do={
    log error "( $iUser ) ONLOGIN ERROR! comment:[$aNote] => INVALID COMMENT!"
    /ip hotspot user set [find name=$iUser] disable=yes
    $eLogoutUser iUser=$iUser iDMac=$iDMac; return 0
  }
  local eReplace do={
    local iRet
    for i from=0 to=([len $1]-1) do={
      local x [pick $1 $i]
      if ($x=$2) do={set x $3}
      set iRet ($iRet.$x)
    }; return $iRet
  }
  local iRandMac ("26AE"~[pick $iDMac 1 2])
  local iMacFile [$eReplace $iDMac ":" ""]
  local iUsrTime ($aUser->"limit-uptime")
  local iHotSpot [/ip hotspot profile get [.. get [find interface=$iDInt] profile] html-directory]

  # Add User Scheduler
  do {
  if ([/system scheduler find name=$iUser]="") do={
    /system scheduler add name=$iUser interval=0 \
    on-event=("# EXPIRE ( $iUser ) #\r\n".\
              "local iUser \"$iUser\"; local iDMac \"$iDMac\"\r\n".\
              "local iMacFile \"$iMacFile\"; local iHotSpot \"$iHotSpot\"\r\n".\
              "do {\r\n".\
              "local eUserExpire [parse [/system script get ss-1Fi-eUserExpire source]]\r\n".\
              "\$eUserExpire \$iUser \$iDMac \$iMacFile \$iHotSpot\r\n".\
              "} on-error={log error \"( \$iUser ) SYSHED ERROR! Expire User Module\"}\r\n".\
              "# END #\r\n")
    local x 10;while (($x>0)&&([/system scheduler find name=$iUser]="")) do={set x ($x-1);delay 1s}
    set iExtUCode 0
  }
  # Cancel user-login if user-scheduler NOT FOUND!
  if ([/system scheduler find name=$iUser]="") do={
    log error "( $iUser ) ONLOGIN ERROR! /system scheduler [$iUser] => NOT FOUND!"
    $eLogoutUser iUser=$iUser iDMac=$iDMac; return 0
  }
  } on-error={log error "( $iUser ) ONLOGIN ERROR! Add User Scheduler Module"}

  # Update User Validity/Interval/Comment/eMail
  if ($iExtUCode=0) do={ set iExtUCode "ADDNEW USER" }
  if ($iExtUCode=1) do={ set iExtUCode "EXTEND USER" }
  local xUsrTime $iUsrTime; if ([len $iUsrTime]=0) do={ set xUsrTime "nolimit" }
  log warning "$iExtUCode ( $interface ) => user=[$iUser] mac=[$iDMac] usertime=[$xUsrTime] amt=[$iSalesAmt]"
  set iValidity ($iValidity + [/system scheduler get [find name=$iUser] interval])
  # if ($iValidity = 0s and $iUsrTime > 1d) do={ set iValidity $iUsrTime }; # BUG FIX (temporary)
  if ($iValidity != 0s and $iValidity < $iUsrTime) do={ set iValidity ($iUsrTime + $iValidity) }; # BUG FIX
  /system scheduler set [find name=$iUser] interval=$iValidity
  /ip hotspot user set [find name=$iUser] comment=""
  /ip hotspot user set [find name=$iUser] email="$iSalesAmt@juanfi.$iMacFile.active"

  # Set User Date/Time Variables
  local eGetDate [parse [/system script get ss-eGetDateTime source]]
  local iDateBeg [/system scheduler get [find name=$iUser] start-date]
  local iTimeBeg [/system scheduler get [find name=$iUser] start-time]
  local iUsrBeg0 ([$eGetDate "D" $iDateBeg]." ".[pick $iTimeBeg 0 5])
  local iNextRun [/system scheduler get [find name=$iUser] next-run]
  local iDateEnd [$eGetDate "D" $iNextRun]
  local iTimeEnd [$eGetDate "T" $iNextRun]
  local iUsrEnd0 "NO EXPIRATION"
  if ([len $iNextRun]>1) do={
    set iUsrEnd0 ($iDateEnd." ".[pick $iTimeEnd 0 5])
  }
  log info "( $iUser ) beg=[$iUsrBeg0] end=[$iUsrEnd0] validity=[$iValidity] vendo=[$iVendoNme]"

  # Add User Data File
  local eAddDatFiles [parse [/system script get ss-1Fi-eAddDatFiles source]]
  $eAddDatFiles $iUser $iMacFile $iUsrEnd0 $iHotSpot
  if ($iUser!=$iMacFile) do={ $eAddDatFiles $iUser $iUser $iUsrEnd0 $iHotSpot }

  # Update Sales ( Today/Month )
  local eAddSales [parse [/system script get ss-1Fi-eAddSales source]]
  local iSalesToday [$eAddSales $iUser $iSalesAmt "todayincome" "JuanFi Sales Daily ( TOTAL )"]
  local iSalesMonth [$eAddSales $iUser $iSalesAmt "monthlyincome" "JuanFi Sales Monthly ( TOTAL )"]

  # Telegram Reporting
  do {
  local isTelegram 0 ;# 0=disable or 1=enable
  if ($isTelegram=1) do={
    local iTGBotToken "xxxxxxxxxx:xxxxxxxxxxxxx-xxxxxxxxxxxxxxx-xxxxx" ;# Telegram Bot Token
    local iTGrpChatID "xxxxxxxxxxxxxx" ;# Telegram Group Chat ID
    local iUActive [/ip hotspot active print count-only]
    local iDevName [pick [/ip dhcp-server lease get [find mac-address=$iDMac] host-name] 0 15]
    local iMessage ("<<== $iExtUCode ==>>%0A".\
                    "User: $iUser%0A".\
                    "IP: $address%0A".\
                    "MAC: $iDMac%0A".\
                    "Device: $iDevName%0A".\
                    "Active Users: $iUActive%0A%0A".\
                    "Vendo Name : $iVendoNme%0A".\
                    "User Time  : $xUsrTime%0A".\
                    "Beg: $iUsrBeg0%0A".\
                    "End: $iUsrEnd0%0A".\
                    "Sale Amount: $iSalesAmt%0A".\
                    "Total Today: $iSalesToday%0A".\
                    "Total Month: $iSalesMonth%0A".\
                    "Vendo Today: $iVendoToday%0A".\
                    "Vendo Month: $iVendoMonth%0A".\
                    "<<=====================>>")
    local iMessage [$eReplace ($iMessage) " " "%20"]
    do {/tool fetch url="https://api.telegram.org/bot$iTGBotToken/sendmessage?chat_id=$iTGrpChatID&text=$iMessage" keep-result=no} on-error={}
  }
  } on-error={log error "( $iUser ) ONLOGIN ERROR! Telegram Reporting Module"}

  # User Comment Info
  /ip hotspot user  set [find name=$iUser] comment="+ end=[$iUsrEnd0] beg=[$iUsrBeg0] mac=[$iDMac] validity=[$iValidity] vlan=[ $interface ] amt=[$iSalesAmt]"
  /system scheduler set [find name=$iUser] comment="+ ( $interface ) beg=[$iUsrBeg0] end=[$iUsrEnd0] mac=[$iDMac] usertime=[$iUsrTime] amt=[$iSalesAmt]"
}
